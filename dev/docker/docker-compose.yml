version: '3.8'
services:

  # Service for hosting the API.
  # This container runs the FastAPI REST and GraphQL APIs
  api:
    container_name: mast-api
    build:
      context: ../../
      dockerfile: ./dev/docker/api.Dockerfile
    image: mast-api:latest
    restart: always
    volumes:
      - ../../data:/code/data
      - ../../src:/code/src
    ports:
      - '8081:5000'
    entrypoint: 
      - "python"
      - "-m"
      - "uvicorn"
      - "src.api.main:app"
      - "--host"
      - "0.0.0.0"
      - "--port"
      - "5000"
      - "--reload"
    environment:
      - DATABASE_HOST=pg_container
      - DATABASE_PORT=5432
    networks:
      - dbnetwork

  # Service for the Minio instance
  # This container runs the minio S3 buckets and console
  # minio:
  #   image: minio/minio
  #   container_name: minio
  #   ports:
  #     - "9000:9000"
  #     - "9001:9001"
  #   volumes:
  #     - ./data/mast/s3data:/mnt/data
  #   environment:
  #     MINIO_ROOT_USER: ${MINIO_USER}
  #     MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD}
  #     MINIO_VOLUMES: "/mnt/data"
  #   command: ['server', '/mnt/data', '--console-address', ":9001"]
  #   networks:
  #     - dbnetwork

  # # This service a bucket for the mast data is none exists.
  # createbuckets:
  #   image: minio/mc
  #   depends_on:
  #     - minio
  #   volumes:
  #    - ./data/:/data
  #   entrypoint: >
  #     /bin/sh -c "
  #     /usr/bin/mc alias set srv https://minio:9000 minio99 minio123;
  #     /usr/bin/mc mb srv/mast;
  #     /usr/bin/mc anonymous set public srv/mast;
  #     exit 0;
  #     "
  #   networks:
  #     - dbnetwork

  # Service for the PostgreSQL Database
  # This container runs the PostgreSQL database which contains the metadata for MAST.
  meta_database:
    container_name: pg_container
    image: postgres:15.3
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /data/postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres:/data/postgres
      - ./:/app
    networks:
      - dbnetwork


  # Service for pgadmin
  # This container runs a pgadmin instance for administering the database
  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_USER}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
      PGADMIN_LISTEN_PORT: 5050
    ports:
      - "5050:5050"
    volumes:
      - pgadmin:/var/lib/pgadmin
      - ./:/app
    networks:
      - dbnetwork

networks:
  dbnetwork:
    name: dbnetwork
    driver: bridge

volumes:
    postgres:
    pgadmin:
    acme:
    certs:
    vhost:
    html: