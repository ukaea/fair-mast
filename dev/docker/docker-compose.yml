services:
  # Service for hosting the API.
  # This container runs the FastAPI REST and GraphQL APIs
  api:
    container_name: mast-api
    build:
      context: ../../
      dockerfile: ./dev/docker/api.Dockerfile
    image: mast-api:latest
    restart: always
    volumes:
      - ../../tests/mock_data:/code/data
      - ../../data/index:/code/index
      - ../../src:/code/src
    ports:
      - '8081:5000'
    entrypoint: 
      - "python"
      - "-m"
      - "uvicorn"
      - "src.api.main:app"
      - "--host"
      - "0.0.0.0"
      - "--port"
      - "5000"
      - "--reload"
    environment:
      - DATABASE_HOST=pg_container
      - DATABASE_PORT=5432
    networks:
      - dbnetwork

  # Service for the PostgreSQL Database
  # This container runs the PostgreSQL database which contains the metadata for MAST.
  meta_database:
    container_name: pg_container
    image: postgres:15.3
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /data/postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres:/data/postgres
      - ./:/app
    networks:
      - dbnetwork

  # Service for pgadmin
  # This container runs a pgadmin instance for administering the database
  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_USER}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
      PGADMIN_LISTEN_PORT: 5050
    ports:
      - "5050:5050"
    volumes:
      - pgadmin:/var/lib/pgadmin
      - ./:/app
    networks:
      - dbnetwork
      
  # Service for hardware monitoring exporter
  # This container runs a node_exporter instance used to export hardware metrics
  node_exporter:
    image: quay.io/prometheus/node-exporter:latest
    container_name: node_exporter
    volumes:
      - '/:/host:ro,rslave'
    networks:
      - dbnetwork
    ports:
      - 9100:9100

  # Service for an api monitoring exporter
  # This container runs a post-gres instance used to export api metrics
  pgsql_exporter:
    image: quay.io/prometheuscommunity/postgres-exporter
    container_name: postgres_exporter
    networks:
      - dbnetwork
    ports:
      - 9187:9187

  # Service for metric aggregator
  # This container runs a prometheus instance for collating all of the exposed metrics and transfering them to grafana
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - './prometheus.yml:/etc/prometheus/prometheus.yml'
    networks:
      - dbnetwork
    ports:
      - 9090:9090

  # Service for dashboarding service grafana
  # This container runs a grafana instance used to display the gathered metrics in dashboards
  grafana:
    image: grafana/grafana-enterprise
    container_name: grafana
    networks:
      - dbnetwork
    ports:
      - 3000:3000
    volumes:
      - './grafana/provisioning/:/etc/grafana/provisioning/'

  # Service for hardware monitoring exporter
  # This container runs a node_exporter instance used to export hardware metrics
  node_exporter:
    image: quay.io/prometheus/node-exporter:latest
    container_name: node_exporter
    volumes:
      - '/:/host:ro,rslave'
    networks:
      - dbnetwork
    ports:
      - 9100:9100

  # Service for an api monitoring exporter
  # This container runs a post-gres instance used to export api metrics
  pgsql_exporter:
    image: quay.io/prometheuscommunity/postgres-exporter
    container_name: postgres_exporter
    networks:
      - dbnetwork
    ports:
      - 9187:9187

  # Service for metric aggregator
  # This container runs a prometheus instance for collating all of the exposed metrics and transfering them to grafana
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - './prometheus.yml:/etc/prometheus/prometheus.yml'
    networks:
      - dbnetwork
    ports:
      - 9090:9090

  # Service for dashboarding service grafana
  # This container runs a grafana instance used to display the gathered metrics in dashboards
  grafana:
    image: grafana/grafana-enterprise
    container_name: grafana
    networks:
      - dbnetwork
    ports:
      - 3000:3000
    environment:
     - GF_SERVER_ROOT_URL=http://90.254.239.42/mon
    volumes:
      - './grafana/provisioning/:/etc/grafana/provisioning/'

  nginx:
    image: nginx
    container_name: reverse_proxy
    networks:
     - dbnetwork
    ports:
     - 80:80
     - 443:443
    volumes:
      - './nginx.conf:/etc/nginx/conf.d/default.conf:ro'
      - './certbot/www:/var/www/certbot/:ro'
      - './certbot/conf/:/etc/nginx/ssl/:ro'
      
  certbot:
    image: certbot
    volumes:
      - './certbot/www/:/var/www/certbot/:rw'
      - './certbot/conf/:/etc/letsencrypt/:rw'

networks:
  dbnetwork:
    name: dbnetwork
    driver: bridge

volumes:
    postgres:
    pgadmin:
    acme:
    certs:
    vhost:
    html:
